Specification & Assigned Task 

+ SLG	   Migrate bookmarks to a text file

Setup: Create keys
 + script keyutil.py creates the keys and writes them to config.ini
 + keyutil.py --create makes config.ini with an RSA public key pair stored as a JWK
 + keyutil.py --read reads the JWK and verifies encryption & decryption

Configuration and State Information:
config.ini file
 + private key as a JSON object  (no need to store public key because RSA public key can be drrived from private key)
 + location for the sqlite3 database

Database Schema:
 + dbutil.py - program to manage database utility
table: responses
rowid      int
timestamp  datetime
encryptedFirstname string
firstname  string
encryptedAge string
age	   integer

Server Side:
+ Have a web server that the client connects to.  http://cats6-12.it.census.gov/survey.cgi
+ survey.cgi:
+ Get public key out of config.ini
  + Send the public key as a JWK to the browser in an HTML document containing the form
  + Create a form that requests First Name and Age
  + Create a function for onsubmit() that has an embedded JSON variable for the JWK.
  + The function is described below

Client Side
- Receive the form
- Let the user fill out the form
- Wait for the SUBMIT button to be  
- onsubmit function:
  - import the key
  - the form has two fields with the ids 'fistname' and 'age'
  - getElementById('firstname') and encrypt to encryptedFirstname
  - getElementById('age') and encrypt to encryptedAge
  - do a $.get() to the server with a URL in the form:
    http://cats6-12.it.census.gov/demo/submit.cgi&firstname=bin1&age=bin2
    where bin1 and bin2 are base64-encoded values, encoded in the browser with btoa()
  - when GET is successful, run a callback that:
    - JavaScript alert -- "Thank you, your form is submit"
    - Clear the form

Server Side Again:
- Receive the GET
- Base64 decode with built-in module
- Decrypt with the matching private key  (q: where do we store the key for the demo?)

Server Report Page:
- https://cats6-12.it.census.gov/demo/report.cgi
- Display a table:
  - headers for all of the columns
  - dump the full contents of the table.
  - refresh every second

Demo Outline:
- Screen #1 
   - web page with the report http://cats6-12.it.census.gov/demo/report.cgi
   - terminal that is "tail -f" on webserver log- 
- Screen #2:
   - http://cats6-12.it.census.gov/demo/survey.cgi
- User will enter name & age into survey & click submit
- Browser will say "Thank you" with an alert() and then clear the form.

================================================================
http://www.iana.org/assignments/jose/jose.xhtml

Simple RSA implementation in python:

https://stuvel.eu/python-rsa-doc/usage.html#generating-keys

Includes random padding.
Pure-python implementation.

(pub,priv) = rsa.newkeys(1024)

Time to make keys:
In [24]: timeit.timeit(stmt='import rsa;rsa.newkeys(1024)',setup='pass',number=100)
Out[24]: 54.53275369480252

So about 1/2 a second to make each 1024-bit key

ciphertext = rsa.encrypt(message,pub)      # Encrypt
cleartext  = rsa.decrypt(ciphertext,priv)

================

Import key:
https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey
var crypto = window.crypto.subtle;
var result = window.crypto.subtle.importKey(format, keyData, algo, extractable, usages);
var result = window.crypto.subtle.importKey("jwk",json,"RSASSA-PKCS1-v1_5",false,["encrypt"])


https://blog.engelke.com/tag/webcrypto/

Doesn't work:

window.crypto.subtle.importKey("jwk",{kty:"RSA",n:22274007767343454548012915410744658075045026313005275321801588542576526738428589891789438516407083323012684709581412812993914356150729518589466247003793287293459391831105207886477273358710209316832135846320470303698120038219945630580217987631488607408068639197855232113771385736060021116655997884681997153800913006220087184566658815966877816305583065154845794494653654333099122716810914189856150432591692756659156928827316696948063547713447439322090001593961558929320882958919548179432784716696318343481325280834015111805114118335565008613216066305189061679259642163812893129408954179096957651718184806291840781584781,e:65537},{name:"RSASSA-PKCS1-v1_5",alg:"RS256"},false,["encrypt"])

Promise__proto__: Promise[[PromiseStatus]]: "rejected"[[PromiseValue]]: TypeError: RsaHashedImportParams: hash: Missing or not an AlgorithmIdentifier
    at <anonymous>:1:22
    VM684:1 Uncaught (in promise) TypeError: RsaHashedImportParams: hash: Missing or not an AlgorithmIdentifier
        at <anonymous>:1:22


Code that alegedly works:


var importedAesKey;

window.crypto.subtle.importKey(
    "raw",                          // Exported key format
    aesKeyBytes,                    // The exported key
    {name: "AES-CBC", length: 128}, // Algorithm the key will be used with
    true,                           // Can extract key value to binary string
    ["encrypt", "decrypt"]          // Use for these operations
).
then(function(key) {importedAesKey = key;}).
catch(function(err) {alert("Something went wrong: " + err.message);});

================
Code that works:
https://github.com/diafygi/webcrypto-examples#rsassa-pkcs1-v1_5---importkey


window.crypto.subtle.importKey(
    "jwk", //can be "jwk" (public or private), "spki" (public only), or "pkcs8" (private only)
    {   //this is an example jwk key, other key types are Uint8Array objects
        kty: "RSA",
        e: "AQAB",
        n: "vGO3eU16ag9zRkJ4AK8ZUZrjbtp5xWK0LyFMNT8933evJoHeczexMUzSiXaLrEFSyQZortk81zJH3y41MBO_UFDO_X0crAquNrkjZDrf9Scc5-MdxlWU2Jl7Gc4Z18AC9aNibWVmXhgvHYkEoFdLCFG-2Sq-qIyW4KFkjan05IE",
        alg: "RS256",
        ext: true,
    },
    {   //these are the algorithm options
        name: "RSASSA-PKCS1-v1_5",
        hash: {name: "SHA-256"}, //can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
    },
    false, //whether the key is extractable (i.e. can be used in exportKey)
    ["verify"] //"verify" for public key import, "sign" for private key imports
)
.then(function(publicKey){
    //returns a publicKey (or privateKey if you are importing a private key)
    console.log(publicKey);
})
.catch(function(err){
    console.error(err);
});

This puts it in window.simson_key:

window.crypto.subtle.importKey(
    "jwk", //can be "jwk" (public or private), "spki" (public only), or "pkcs8" (private only)
    {   //this is an example jwk key, other key types are Uint8Array objects
        kty: "RSA",
        e: "AQAB",
        n: "vGO3eU16ag9zRkJ4AK8ZUZrjbtp5xWK0LyFMNT8933evJoHeczexMUzSiXaLrEFSyQZortk81zJH3y41MBO_UFDO_X0crAquNrkjZDrf9Scc5-MdxlWU2Jl7Gc4Z18AC9aNibWVmXhgvHYkEoFdLCFG-2Sq-qIyW4KFkjan05IE",
        alg: "RS256",
        ext: true,
    },
    {   //these are the algorithm options
        name: "RSASSA-PKCS1-v1_5",
        hash: {name: "SHA-256"}, //can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
    },
    false, //whether the key is extractable (i.e. can be used in exportKey)
    ["verify"] //"verify" for public key import, "sign" for private key imports
)
.then(function(publicKey){
    //returns a publicKey (or privateKey if you are importing a private key)
    window.simson_key = publicKey;
    console.log(publicKey);
})
.catch(function(err){
    console.error(err);
});




================================================================
http://cats6-12.it.census.gov/demo/report.cgi - server error
http://cats6-12.it.census.gov/demo/survey.cgi - works

sudo -u apache demo/report.cgi
================
importKey: NotSupportedError: Only secure origins are allowed (see: https://goo.gl/Y0ZkNV)
